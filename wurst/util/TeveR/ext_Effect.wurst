/*
*   Name:           EffectExtensions.wurst
*   System:         ExtensionsBundle
*   Description:    This script serves for definition of serveral helper and enhanced usefull functions for effects
*   Author:         Alex
*/

package ext_Effect

import MapBounds
import ClosureTimers

/** used to properly remove effects timed*/
public function effect.destrTimed(real time)
    doAfter(time) ->     
        if this != null 
            this.destr()

/** used to properly remove effects timed*/
public function effect.destrAdvTimed(real time)
    doAfter(time) ->
        if this != null
            this.destrAdv()

/** used to properly remove effects*/
public function effect.destrAdv()
    this.setColor(colorA(0, 0, 0, 0))
    this.setPos(vec3(boundMin.x, boundMin.y, 5000))
    this.setTime(1)
    this.setTimeScale(10)
    this.destr()


public tuple attachmentpoints(string atp0, string atp1, string atp2, string atp3, string atp4, string atp5)

// ============================================================================
/** This class is meant to be only a model for your own "FX" class. */
public class FX_Base

    static function createEffect(string effectPath, vec2 pos) returns effect
        return AddSpecialEffect(effectPath, pos.x, pos.y)

    static function createEffect(string effectPath, vec3 pos) returns effect
        let fx = FX_Base.createEffect(effectPath, vec2(pos.x, pos.y))
        fx.setZ(pos.z)
        return fx

    static function createEffect(string effectPath, widget target, string attachmentPoint) returns effect
        return AddSpecialEffectTarget(effectPath, target, attachmentPoint)

    static function createEffect(string effectPath, widget target, string attachmentPoint, real destroyTime) returns effect
        let e = FX_Base.createEffect(effectPath, target, attachmentPoint)
        if destroyTime >= 0
            e.destrAdvTimed(destroyTime)
        return e

    static function createEffect(int pId, string effectPath, vec2 pos) returns effect
        var _effectPath = ""
        if localPlayer == players[pId] or pId == -1
            _effectPath = effectPath
        return createEffect(_effectPath, pos)

    static function createEffect(int pId, string effectPath, vec3 pos) returns effect
        var _effectPath = ""
        if localPlayer == players[pId] or pId == -1
            _effectPath = effectPath
        return createEffect(_effectPath, pos)

    /** creates an effect on the pos for a specific player, (destroyTime < 0 ) == permanent*/
    static function createEffect(int pId, string effectPath, vec2 pos, real destroyTime) returns effect
        let e = FX_Base.createEffect(pId, effectPath, pos)
        if destroyTime >= 0
            e.destrAdvTimed(destroyTime)
        return e

    /** creates an effect on the pos for a specific player, (destroyTime < 0 ) == permanent*/
    static function createEffect(int pId, string effectPath, vec3 pos, real destroyTime) returns effect
        let e = FX_Base.createEffect(pId, effectPath, pos)
        if destroyTime >= 0
            e.destrAdvTimed(destroyTime)
        return e

    /** creates an effect on the pos and scales it by a specific range, (destroyTime < 0 ) == permanent*/
    static function createEffectWithAoeScale(int pId, string effectPath, vec2 pos, real aoeScaleRange, real destroyTime) returns effect
        let areaEffect = FX_Base.createEffect(pId, effectPath, pos, destroyTime)
        BlzSetSpecialEffectScale(areaEffect, aoeScaleRange/100)
        return areaEffect
    
    /** creates an effect on the pos and scales it by a specific range for a specific player, (destroyTime < 0 ) == permanent*/
    static function createEffectWithAoeScale(int pId, string effectPath, vec3 pos, real aoeScaleRange, real destroyTime) returns effect
        let areaEffect = FX_Base.createEffect(pId, effectPath, pos, destroyTime)
        BlzSetSpecialEffectScale(areaEffect, aoeScaleRange/100)
        return areaEffect

    @configurable static function createTag(int _pId, vec3 _pos, vec2 _velocity, string _text, real _textSize, real _duration, real _fadePoint, colorA _color)
        //_CreateTTExEntity_fading(pos, velocity, text, textSize, duration, color, pId)..setFadepoint(fadePoint)
